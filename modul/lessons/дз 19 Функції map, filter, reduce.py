# # Завдання 1
# # Напишіть програму, яка дозволяє користувачеві обчислити частку (ділення одного числа на інше) двох чисел.
# # Програма приймає два значення з клавіатури і повертає результат операції на екран. Обробіть виняток, що
# # виникає під час ділення на нуль, і виведіть повідомлення про помилку.
# #
#
# print('Початок програми')
# try:
#     x  = int(input('Enter integer number x = '))
#     y  = int(input('Enter integer number y = '))
#     result = x / y
#
# except ZeroDivisionError as e: # вказуемо назву винятку який ми передбачаемо побачити (помилки)
#     print(f'Ділення на нуль неможливе, {y=}') #виведе зазначене повідомлення
#     print(e, type(e))  # помилки являются обектами, їх можна присвоювати до змінних (except Exception as e)
# except ValueError: # вказуемо назву винятку(помилки)
#     print('Некоректні дані')
# except Exception:  # базовий клас помилок, виконуетьсяв першу чергу, треба ставити в кінець
#     print('Стався Exception')
#
# else: #виконуется коли немае помилок
#     print('Ділення пройшло успішно')
#     print(f'{result=}')
#
# finally: # виконуется в любому випадку
#     print('Кінець програми')

# # Завдання 2
# # Реалізуйте перше завдання через функцію. Функція повинна приймати два параметри і відображати результат ділення на екран.
# # Створіть дві версії реалізації функції:
# # · Перша версія не обробляє виняток усередині функції. Уся обробка знаходиться зовні;
# # · Друга версія обробляє виняток усередині функції.
#
# print('Початок програми') # · Перша версія не обробляє виняток усередині функції. Уся обробка знаходиться зовні;
# def main(x, y):
#     return x/y
#
# try:
#     x  = int(input('Enter integer number x = '))
#     y  = int(input('Enter integer number y = '))
#     result = main(x,y)
#
# except ZeroDivisionError as e: # вказуемо назву винятку який ми передбачаемо побачити (помилки)
#     print(f'Ділення на нуль неможливе, {y=}') #виведе зазначене повідомлення
#     print(e, type(e))  # помилки являются обектами, їх можна присвоювати до змінних (except Exception as e)
# except ValueError: # вказуемо назву винятку(помилки)
#     print('Некоректні дані')
# except Exception:  # базовий клас помилок, виконуетьсяв першу чергу, треба ставити в кінець
#     print('Стався Exception')
#
# else: #виконуется коли немае помилок
#     print('Ділення пройшло успішно')
#     print(f'{result=}')
#
# finally: # виконуется в любому випадку
#     print('Кінець програми')
#
# print('Початок програми')  # · Друга версія обробляє виняток усередині функції.


# def main(x, y):
#     try:
#         result = x / y
#
#     except ZeroDivisionError as e:  # вказуемо назву винятку який ми передбачаемо побачити (помилки)
#         print(f'Ділення на нуль неможливе, {y=}')  # виведе зазначене повідомлення
#     else:
#         print('Ділення пройшло успішно')
#     finally:
#         return result, e
#
#
# try:
#     x = int(input('Enter integer number x = '))
#     y = int(input('Enter integer number y = '))
#     result = main(x, y)
#     print(f'{result = } {e = }')
#
# except ValueError:  # вказуемо назву винятку(помилки)
#     print('Некоректні дані')
# except Exception:  # базовий клас помилок, виконуетьсяв першу чергу, треба ставити в кінець
#     print('Стався Exception')
#
# finally:  # виконуется в любому випадку
#     print('Кінець програми')



# #                           ДОМАШНЯ РОБОТА №38 ВИНЯТКИ~
# # Завдання 1
# # Напишіть програму, яка запитує в користувача число і обчислює його квадратний корінь. Обробіть виняток, що
# # виникає при введенні від'ємного числа, і виведіть повідомлення про помилку.
#
# from math import sqrt
# try:
#     n = int(input('Введіть число: '))
#     if n < 0:
#         raise ValueError("Ви ввели від'ємне число обчислити корінь неможливо!")
#
#
# except ValueError as e:
#     print(f"Помилка: {e}")
#
# else:
#     res = sqrt(n)
#     print(f'Корінь від {n} = {round(res, 2)}')
#
#
# # Завдання 2
# # Реалізуйте перше завдання через функцію. Функція повинна приймати число як параметр і повертати квадратний
# # корінь числа. Перевірка коректності отриманих даних повинна бути всередині функції. Створіть дві версії реалізації функції:
# # · Перша версія не обробляє виняток всередині функції. Уся обробка знаходиться зовні;
#
# from math import sqrt
#
# def factorial(numb):
#     res = 1
#     for i in range(1, numb+1):
#         res *= i
#     return res
#
#
# while True:
#     try:
#         numb = int(input('Введіть число, при воді 0 програма завершиться: '))
#         if numb == 0:
#             exit('Exit program')
#         if numb < 0:
#             raise ValueError("Ви ввели від'ємне число обчислити факторіалу неможливо!")
#
#
#     except Exception as e:
#         print (f"Помилка: {e}")
#
#     else:
#         res = factorial(numb)
#         print(f'Факторіал від {numb} = {round(res, 2)}')
#         break
#
# def factorial(numb):
#
#     try:
#         numb = int(numb)
#         if numb < 0:
#             raise ValueError("Ви ввели від'ємне число обчислити факторіалу неможливо!")
#
#         if numb == 0:
#             exit('Exit program')
#
#         res = 1
#         for i in range(1, numb + 1):
#             res *= i
#
#         return f'Факторіал від {numb} = {round(res, 2)}'
#
#     except Exception as e:
#         return f"Помилка: {e}"
#
# numb = input('Введіть число, при воді 0 програма завершиться: ')
# res = factorial(numb)
# print(res)
#
# # · Друга версія обробляє виняток усередині функції.
#
# # Завдання 3
# # Напишіть програму, яка дає змогу заповнити користувачеві словник із клавіатури парами "ключ/значення".
# # Після отримання даних відобразіть на екрані меню, яке дозволяє виконати такі операції:
# # · Відображення словника;
# # · Пошук значення в словнику;
# # · Заміна значення в словнику. Значення має бути знайдено за ключем;
# # · Відображення значення за ключем, введеним користувачем;
# # · Видалення значення за ключем, введеним користувачем.
# # Обробіть виняток, що виникає під час виходу за межі словника (користувач ввів невірний ключ), і виведіть повідомлення
# # про помилку.
#
# try:
#     lst = [num for num in map(int, input('Ведіть числаякі хочете додати до списку: ').split())]
#
#     print('Доступні операції: ')
#     print('''1.	Відображення списку;
# 2.	Отримання максимального значення у списку;
# 3.	Отримання мінімального значення у списку;
# 4.	Відображення значення елемента за індексом, введеним користувачем;
# 5.	Видалення елемента за індексом, введеним користувачем.''')
#     n = int(input('Введіть потрібну Вам операцію: '))
#
#     if n == 1:
#         print(list(lst))
#
#     if n == 2:
#         print(f'Максимальне значення у списку = {max(*lst)}')
#
#     if n == 3:
#         print(f'Мінімальне значення у списку = {min(*lst)}')
#
#     if n == 4:
#         ind = int(input('Ведіть індекс значення яке хочете побачити: '))
#         print(f'Значення елемента за індексом {ind} = {lst[ind]}')
#
#     if n == 5:
#         ind = int(input('Ведіть індекс значення яке хочете видалити: '))
#         del_item = lst.pop(ind)
#         print(f"Значення {del_item} за індексом {ind} було видалене, тепер список вигляде так: {lst}")
#
# except IndexError:
#     print(f'Користувач ввів неправильне значення для індексу елемента в списку')
#
# except ValueError:
#     print(f'Некоректний ввід для індексу. Введіть ціле число.')
#
# Завдання 4
# Реалізуйте третє завдання через функції. Створіть дві версії реалізації функцій:
# •	Перша версія не обробляє винятки всередині функцій. Уся обробка знаходиться зовні;
# •	Друга версія обробляє винятки всередині функцій.
#
#
# •	Перша версія не обробляє винятки всередині функцій. Уся обробка знаходиться зовні;
#
# def even_nam_list(lst):
#     generator_lst = [num for num in lst]
#     return generator_lst
#
# try:
#     lst = map(int, input('Ведіть числаякі хочете додати до списку: ').split())
#     res = even_nam_list(lst)
#
#     print('Доступні операції: ')
#     print('''1.	Відображення списку;
# 2.	Отримання максимального значення у списку;
# 3.	Отримання мінімального значення у списку;
# 4.	Відображення значення елемента за індексом, введеним користувачем;
# 5.	Видалення елемента за індексом, введеним користувачем.''')
#     n = int(input('Введіть потрібну Вам операцію: '))
#
#     if n == 1:
#         print(list(res))
#
#     if n == 2:
#         print(f'Максимальне значення у списку = {max(*res)}')
#
#     if n == 3:
#         print(f'Мінімальне значення у списку = {min(*res)}')
#
#     if n == 4:
#         ind = int(input('Ведіть індекс значення яке хочете побачити: '))
#         print(f'Значення елемента за індексом {ind} = {res[ind]}')
#
#     if n == 5:
#         ind = int(input('Ведіть індекс значення яке хочете видалити: '))
#         del_item = res.pop(ind)
#         print(f"Значення {del_item} за індексом {ind} було видалене, тепер список вигляде так: {res}")
#
#
#
# except IndexError:
#     print(f'Користувач ввів неправильне значення для індексу елемента в списку')
#
# except ValueError:
#     print(f'Некоректний ввід для індексу. Введіть ціле число.')
#
#
#
#
# # •	Друга версія обробляє винятки всередині функцій.
# def even_nam_list(lst):
#
#     try:
#         print('Доступні операції: ')
#         print('''1.	Відображення списку;
# 2.	Отримання максимального значення у списку;
# 3.	Отримання мінімального значення у списку;
# 4.	Відображення значення елемента за індексом, введеним користувачем;
# 5.	Видалення елемента за індексом, введеним користувачем.''')
#         generator_lst = [num for num in lst]
#
#         n = int(input('Введіть потрібну Вам операцію: '))
#
#         if n == 1:
#             return f'Введений список має наступний вигляд: {generator_lst}'
#
#         if n == 2:
#             return f'Максимальне значення у списку = {max(*generator_lst)}'
#
#         if n == 3:
#             return f'Мінімальне значення у списку = {min(*generator_lst)}'
#
#         if n == 4:
#             ind = int(input('Ведіть індекс значення яке хочете побачити: '))
#             return f'Значення елемента за індексом {ind} = {generator_lst[ind]}'
#
#         if n == 5:
#             ind = int(input('Ведіть індекс значення яке хочете видалити: '))
#             del_item = generator_lst.pop(ind)
#             return f"Значення {del_item} за індексом {ind} було видалене, тепер список вигляде так: {generator_lst}"
#
#     except IndexError:
#         print(f'Користувач ввів неправильне значення для індексу елемента в списку')
#
#     except ValueError:
#         print(f'Некоректний ввід для індексу. Введіть ціле число.')
#
#
# lst = map(int, input('Ведіть числа які хочете додати до списку: ').split())
# res = even_nam_list(lst)
# print(res)
